{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<thead><tr><th></th><th scope=col>interface</th><th scope=col>bytes</th><th scope=col>packets</th></tr></thead>\n",
       "<tbody>\n",
       "\t<tr><th scope=row>1</th><td>1</td><td>0</td><td>0</td></tr>\n",
       "\t<tr><th scope=row>2</th><td>2</td><td>3946320</td><td>39054</td></tr>\n",
       "\t<tr><th scope=row>3</th><td>3</td><td>2493713</td><td>17027</td></tr>\n",
       "\t<tr><th scope=row>4</th><td>6</td><td>2186780</td><td>15260</td></tr>\n",
       "\t<tr><th scope=row>5</th><td>7</td><td>3340889</td><td>37306</td></tr>\n",
       "\t<tr><th scope=row>6</th><td>9</td><td>0</td><td>0</td></tr>\n",
       "\t<tr><th scope=row>7</th><td>10</td><td>1833765</td><td>19793</td></tr>\n",
       "\t<tr><th scope=row>8</th><td>11</td><td>1833765</td><td>19793</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "\\begin{tabular}{r|lll}\n",
       "  & interface & bytes & packets\\\\\n",
       "\\hline\n",
       "\t1 & 1 & 0 & 0\\\\\n",
       "\t2 & 2 & 3946320 & 39054\\\\\n",
       "\t3 & 3 & 2493713 & 17027\\\\\n",
       "\t4 & 6 & 2186780 & 15260\\\\\n",
       "\t5 & 7 & 3340889 & 37306\\\\\n",
       "\t6 & 9 & 0 & 0\\\\\n",
       "\t7 & 10 & 1833765 & 19793\\\\\n",
       "\t8 & 11 & 1833765 & 19793\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/plain": [
       "  interface   bytes packets\n",
       "1         1       0       0\n",
       "2         2 3946320   39054\n",
       "3         3 2493713   17027\n",
       "4         6 2186780   15260\n",
       "5         7 3340889   37306\n",
       "6         9       0       0\n",
       "7        10 1833765   19793\n",
       "8        11 1833765   19793"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Question 1\n",
    "\n",
    "temporaryFile <- tempfile()\n",
    "download.file(\"https://www.dropbox.com/s/zjf0lm830wzmkwz/snmp-delta.csv?dl=0\",\n",
    "                  destfile=temporaryFile, method=\"curl\", extra=\"-L\")\n",
    "snmpData = read.csv(temporaryFile)\n",
    "interface <- c(snmpData$if.)\n",
    "outUCastPkts <- c(snmpData$outUCastPkts)\n",
    "inOctets <- c(snmpData$inOctets)\n",
    "outOctets <- c(snmpData$outOctets)\n",
    "inUcastPkts <- c(snmpData$inUcastPkts)\n",
    "outNUCastPkts <- c(snmpData$outNUCastPkts)\n",
    "inNUcastPkts <- c(snmpData$inNUcastPkts)\n",
    "data <- data.frame(if.=interface,outUCastPkts=outUCastPkts,inOctets=inOctets,outOctets=outOctets,inUcastPkts=inUcastPkts,outNUCastPkts=outNUCastPkts,inNUcastPkts=inNUcastPkts )\n",
    "\n",
    "interfaces <- c(1,2,3,6,7,9,10,11)\n",
    "octets <- function(interface){\n",
    "sum(data[data[[1]]==interface, c(3,4)])}\n",
    "packet <- function(interface)\n",
    "{\n",
    "    sum(data[data[[1]]==interface, c(2,5,6,7)])\n",
    "} \n",
    "dat <- data.frame(interface=interfaces, \n",
    "          bytes=sapply(interfaces, octets), packets=sapply(interfaces,packet))\n",
    "\n",
    "\n",
    "dat"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "1551.57894736842"
      ],
      "text/latex": [
       "1551.57894736842"
      ],
      "text/markdown": [
       "1551.57894736842"
      ],
      "text/plain": [
       "[1] 1551.579"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "151828.923976608"
      ],
      "text/latex": [
       "151828.923976608"
      ],
      "text/markdown": [
       "151828.923976608"
      ],
      "text/plain": [
       "[1] 151828.9"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "389.652311653105"
      ],
      "text/latex": [
       "389.652311653105"
      ],
      "text/markdown": [
       "389.652311653105"
      ],
      "text/plain": [
       "[1] 389.6523"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "0.251132765312381"
      ],
      "text/latex": [
       "0.251132765312381"
      ],
      "text/markdown": [
       "0.251132765312381"
      ],
      "text/plain": [
       "[1] 0.2511328"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Question 2\n",
    "\n",
    "len <- length(data[data[[1]]==2,c(5)])\n",
    "sum <- sum(data[data[[1]]==2,c(5)])\n",
    "mean <- sum/len\n",
    "mean\n",
    "\n",
    "diff = data[data[[1]]==2,c(5)] - mean\n",
    "var <- (sum(diff*diff))/(len-1)\n",
    "\n",
    "var\n",
    "sd <- sqrt(var)\n",
    "sd\n",
    "cov <- sd/mean\n",
    "cov\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "1551.57894736842"
      ],
      "text/latex": [
       "1551.57894736842"
      ],
      "text/markdown": [
       "1551.57894736842"
      ],
      "text/plain": [
       "[1] 1551.579"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "389.652311653105"
      ],
      "text/latex": [
       "389.652311653105"
      ],
      "text/markdown": [
       "389.652311653105"
      ],
      "text/plain": [
       "[1] 389.6523"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "151828.923976608"
      ],
      "text/latex": [
       "151828.923976608"
      ],
      "text/markdown": [
       "151828.923976608"
      ],
      "text/plain": [
       "[1] 151828.9"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "0.251132765312381"
      ],
      "text/latex": [
       "0.251132765312381"
      ],
      "text/markdown": [
       "0.251132765312381"
      ],
      "text/plain": [
       "[1] 0.2511328"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "503.894736842105"
      ],
      "text/latex": [
       "503.894736842105"
      ],
      "text/markdown": [
       "503.894736842105"
      ],
      "text/plain": [
       "[1] 503.8947"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "290.387843091278"
      ],
      "text/latex": [
       "290.387843091278"
      ],
      "text/markdown": [
       "290.387843091278"
      ],
      "text/plain": [
       "[1] 290.3878"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "84325.0994152047"
      ],
      "text/latex": [
       "84325.0994152047"
      ],
      "text/markdown": [
       "84325.0994152047"
      ],
      "text/plain": [
       "[1] 84325.1"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "0.576286715973917"
      ],
      "text/latex": [
       "0.576286715973917"
      ],
      "text/markdown": [
       "0.576286715973917"
      ],
      "text/plain": [
       "[1] 0.5762867"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "146131.210526316"
      ],
      "text/latex": [
       "146131.210526316"
      ],
      "text/markdown": [
       "146131.210526316"
      ],
      "text/plain": [
       "[1] 146131.2"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "31805.4272737268"
      ],
      "text/latex": [
       "31805.4272737268"
      ],
      "text/markdown": [
       "31805.4272737268"
      ],
      "text/plain": [
       "[1] 31805.43"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "1011585204.06433"
      ],
      "text/latex": [
       "1011585204.06433"
      ],
      "text/markdown": [
       "1011585204.06433"
      ],
      "text/plain": [
       "[1] 1011585204"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "0.217649789933131"
      ],
      "text/latex": [
       "0.217649789933131"
      ],
      "text/markdown": [
       "0.217649789933131"
      ],
      "text/plain": [
       "[1] 0.2176498"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "61569.8421052632"
      ],
      "text/latex": [
       "61569.8421052632"
      ],
      "text/markdown": [
       "61569.8421052632"
      ],
      "text/plain": [
       "[1] 61569.84"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "27977.6250685022"
      ],
      "text/latex": [
       "27977.6250685022"
      ],
      "text/markdown": [
       "27977.6250685022"
      ],
      "text/plain": [
       "[1] 27977.63"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "782747504.473684"
      ],
      "text/latex": [
       "782747504.473684"
      ],
      "text/markdown": [
       "782747504.473684"
      ],
      "text/plain": [
       "[1] 782747504"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "0.454404690865865"
      ],
      "text/latex": [
       "0.454404690865865"
      ],
      "text/markdown": [
       "0.454404690865865"
      ],
      "text/plain": [
       "[1] 0.4544047"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "0"
      ],
      "text/latex": [
       "0"
      ],
      "text/markdown": [
       "0"
      ],
      "text/plain": [
       "[1] 0"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "0"
      ],
      "text/latex": [
       "0"
      ],
      "text/markdown": [
       "0"
      ],
      "text/plain": [
       "[1] 0"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "0"
      ],
      "text/latex": [
       "0"
      ],
      "text/markdown": [
       "0"
      ],
      "text/plain": [
       "[1] 0"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "NaN"
      ],
      "text/latex": [
       "NaN"
      ],
      "text/markdown": [
       "NaN"
      ],
      "text/plain": [
       "[1] NaN"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "0"
      ],
      "text/latex": [
       "0"
      ],
      "text/markdown": [
       "0"
      ],
      "text/plain": [
       "[1] 0"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "0"
      ],
      "text/latex": [
       "0"
      ],
      "text/markdown": [
       "0"
      ],
      "text/plain": [
       "[1] 0"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "0"
      ],
      "text/latex": [
       "0"
      ],
      "text/markdown": [
       "0"
      ],
      "text/plain": [
       "[1] 0"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "NaN"
      ],
      "text/latex": [
       "NaN"
      ],
      "text/markdown": [
       "NaN"
      ],
      "text/plain": [
       "[1] NaN"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Question 3\n",
    "\n",
    "# inUcastPkts\n",
    "mean <- mean(data[data[[1]]==2,c(5)])\n",
    "sd <- sd(data[data[[1]]==2,c(5)])\n",
    "mean\n",
    "sd\n",
    "var(data[data[[1]]==2,c(5)])\n",
    "cov <- sd/mean\n",
    "cov\n",
    "\n",
    "\n",
    "#outUCastPkts\n",
    "\n",
    "mean <- mean(data[data[[1]]==2,c(2)])\n",
    "sd <- sd(data[data[[1]]==2,c(2)])\n",
    "mean\n",
    "sd\n",
    "var(data[data[[1]]==2,c(2)])\n",
    "cov <- sd/mean\n",
    "cov\n",
    "\n",
    "\n",
    "# inOctets\n",
    "mean <- mean(data[data[[1]]==2,c(3)])\n",
    "sd <- sd(data[data[[1]]==2,c(3)])\n",
    "mean\n",
    "sd\n",
    "var(data[data[[1]]==2,c(3)])\n",
    "cov <- sd/mean\n",
    "cov\n",
    "\n",
    "# outOctets\n",
    "mean <- mean(data[data[[1]]==2,c(4)])\n",
    "sd <- sd(data[data[[1]]==2,c(4)])\n",
    "mean\n",
    "sd\n",
    "var(data[data[[1]]==2,c(4)])\n",
    "cov <- sd/mean\n",
    "cov\n",
    "\n",
    "# outNUCastPkts\n",
    "mean <- mean(data[data[[1]]==2,c(6)])\n",
    "sd <- sd(data[data[[1]]==2,c(6)])\n",
    "mean \n",
    "sd\n",
    "var(data[data[[1]]==2,c(6)])\n",
    "cov <- sd/mean\n",
    "cov\n",
    "\n",
    "# inNUcastPkts\n",
    "mean <- mean(data[data[[1]]==2,c(7)])\n",
    "sd <- sd(data[data[[1]]==2,c(7)])\n",
    "mean \n",
    "sd\n",
    "var(data[data[[1]]==2,c(7)])\n",
    "cov <- sd/mean\n",
    "cov\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "plot without title"
      ]
     },
     "metadata": {
      "image/svg+xml": {
       "isolated": true
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Question 4\n",
    "\n",
    "par(mfrow=c(2,2))\n",
    "  plot(data[2,3])\n",
    "  plot(data[5,3])\n",
    "  plot(data[7,3])\n",
    "  plot(data[8,3])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<thead><tr><th></th><th scope=col>interface2</th><th scope=col>interface7</th><th scope=col>interface10</th><th scope=col>interface11</th></tr></thead>\n",
       "<tbody>\n",
       "\t<tr><th scope=row>1</th><td>2898</td><td>2879</td><td>1621</td><td>1621</td></tr>\n",
       "\t<tr><th scope=row>2</th><td>1995</td><td>1836</td><td>1209</td><td>1209</td></tr>\n",
       "\t<tr><th scope=row>3</th><td>2158</td><td>2086</td><td>1468</td><td>1468</td></tr>\n",
       "\t<tr><th scope=row>4</th><td>2064</td><td>1956</td><td>1266</td><td>1266</td></tr>\n",
       "\t<tr><th scope=row>5</th><td>1931</td><td>1848</td><td>1095</td><td>1097</td></tr>\n",
       "\t<tr><th scope=row>6</th><td>1309</td><td>1221</td><td>687</td><td>685</td></tr>\n",
       "\t<tr><th scope=row>7</th><td>1686</td><td>1579</td><td>787</td><td>787</td></tr>\n",
       "\t<tr><th scope=row>8</th><td>3074</td><td>3003</td><td>769</td><td>769</td></tr>\n",
       "\t<tr><th scope=row>9</th><td>1549</td><td>1441</td><td>794</td><td>794</td></tr>\n",
       "\t<tr><th scope=row>10</th><td>1857</td><td>1785</td><td>1043</td><td>1043</td></tr>\n",
       "\t<tr><th scope=row>11</th><td>1784</td><td>1684</td><td>1015</td><td>1015</td></tr>\n",
       "\t<tr><th scope=row>12</th><td>2360</td><td>2251</td><td>1632</td><td>1632</td></tr>\n",
       "\t<tr><th scope=row>13</th><td>2040</td><td>1969</td><td>1450</td><td>1450</td></tr>\n",
       "\t<tr><th scope=row>14</th><td>3065</td><td>2958</td><td>1018</td><td>1018</td></tr>\n",
       "\t<tr><th scope=row>15</th><td>1534</td><td>1462</td><td>736</td><td>736</td></tr>\n",
       "\t<tr><th scope=row>16</th><td>1411</td><td>1310</td><td>757</td><td>771</td></tr>\n",
       "\t<tr><th scope=row>17</th><td>1479</td><td>1372</td><td>721</td><td>707</td></tr>\n",
       "\t<tr><th scope=row>18</th><td>3316</td><td>3229</td><td>914</td><td>914</td></tr>\n",
       "\t<tr><th scope=row>19</th><td>1544</td><td>1437</td><td>811</td><td>811</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "\\begin{tabular}{r|llll}\n",
       "  & interface2 & interface7 & interface10 & interface11\\\\\n",
       "\\hline\n",
       "\t1 & 2898 & 2879 & 1621 & 1621\\\\\n",
       "\t2 & 1995 & 1836 & 1209 & 1209\\\\\n",
       "\t3 & 2158 & 2086 & 1468 & 1468\\\\\n",
       "\t4 & 2064 & 1956 & 1266 & 1266\\\\\n",
       "\t5 & 1931 & 1848 & 1095 & 1097\\\\\n",
       "\t6 & 1309 & 1221 & 687 & 685\\\\\n",
       "\t7 & 1686 & 1579 & 787 & 787\\\\\n",
       "\t8 & 3074 & 3003 & 769 & 769\\\\\n",
       "\t9 & 1549 & 1441 & 794 & 794\\\\\n",
       "\t10 & 1857 & 1785 & 1043 & 1043\\\\\n",
       "\t11 & 1784 & 1684 & 1015 & 1015\\\\\n",
       "\t12 & 2360 & 2251 & 1632 & 1632\\\\\n",
       "\t13 & 2040 & 1969 & 1450 & 1450\\\\\n",
       "\t14 & 3065 & 2958 & 1018 & 1018\\\\\n",
       "\t15 & 1534 & 1462 & 736 & 736\\\\\n",
       "\t16 & 1411 & 1310 & 757 & 771\\\\\n",
       "\t17 & 1479 & 1372 & 721 & 707\\\\\n",
       "\t18 & 3316 & 3229 & 914 & 914\\\\\n",
       "\t19 & 1544 & 1437 & 811 & 811\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/plain": [
       "   interface2 interface7 interface10 interface11\n",
       "1        2898       2879        1621        1621\n",
       "2        1995       1836        1209        1209\n",
       "3        2158       2086        1468        1468\n",
       "4        2064       1956        1266        1266\n",
       "5        1931       1848        1095        1097\n",
       "6        1309       1221         687         685\n",
       "7        1686       1579         787         787\n",
       "8        3074       3003         769         769\n",
       "9        1549       1441         794         794\n",
       "10       1857       1785        1043        1043\n",
       "11       1784       1684        1015        1015\n",
       "12       2360       2251        1632        1632\n",
       "13       2040       1969        1450        1450\n",
       "14       3065       2958        1018        1018\n",
       "15       1534       1462         736         736\n",
       "16       1411       1310         757         771\n",
       "17       1479       1372         721         707\n",
       "18       3316       3229         914         914\n",
       "19       1544       1437         811         811"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Problem 5\n",
    "\n",
    "inter2 <- (data[data[[1]]==2, c(2)] +data[data[[1]]==2, c(5)] + data[data[[1]]==2, c(6)]\n",
    "      +data[data[[1]]==2, c(7) ])\n",
    "inter7 <- (data[data[[1]]==7, c(2)] +data[data[[1]]==7, c(5)] + data[data[[1]]==7, c(6)]\n",
    "      +data[data[[1]]==7, c(7) ])\n",
    "inter10 <- (data[data[[1]]==10, c(2)] +data[data[[1]]==10, c(5)] + data[data[[1]]==10, c(6)]\n",
    "      +data[data[[1]]==10, c(7) ])\n",
    "inter11 <- (data[data[[1]]==11, c(2)] +data[data[[1]]==11, c(5)] + data[data[[1]]==11, c(6)]\n",
    "      +data[data[[1]]==11, c(7) ])\n",
    "all <- data.frame( interface2=inter2, interface7=inter7, interface10=inter10, interface11=inter11)\n",
    "all\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<thead><tr><th></th><th scope=col>interface2</th><th scope=col>interface7</th><th scope=col>interface10</th><th scope=col>interface11</th></tr></thead>\n",
       "<tbody>\n",
       "\t<tr><th scope=row>interface2</th><td>1.0000000</td><td>0.9991045</td><td>0.3907492</td><td>0.3905010</td></tr>\n",
       "\t<tr><th scope=row>interface7</th><td>0.9991045</td><td>1.0000000</td><td>0.3964814</td><td>0.3962536</td></tr>\n",
       "\t<tr><th scope=row>interface10</th><td>0.3907492</td><td>0.3964814</td><td>1.0000000</td><td>0.9998886</td></tr>\n",
       "\t<tr><th scope=row>interface11</th><td>0.3905010</td><td>0.3962536</td><td>0.9998886</td><td>1.0000000</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "\\begin{tabular}{r|llll}\n",
       "  & interface2 & interface7 & interface10 & interface11\\\\\n",
       "\\hline\n",
       "\tinterface2 & 1.0000000 & 0.9991045 & 0.3907492 & 0.3905010\\\\\n",
       "\tinterface7 & 0.9991045 & 1.0000000 & 0.3964814 & 0.3962536\\\\\n",
       "\tinterface10 & 0.3907492 & 0.3964814 & 1.0000000 & 0.9998886\\\\\n",
       "\tinterface11 & 0.3905010 & 0.3962536 & 0.9998886 & 1.0000000\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "1. 1\n",
       "2. 0.99910454763274\n",
       "3. 0.390749159036285\n",
       "4. 0.390500964864765\n",
       "5. 0.99910454763274\n",
       "6. 1\n",
       "7. 0.396481388012108\n",
       "8. 0.396253619377111\n",
       "9. 0.390749159036285\n",
       "10. 0.396481388012108\n",
       "11. 1\n",
       "12. 0.999888610646897\n",
       "13. 0.390500964864765\n",
       "14. 0.396253619377111\n",
       "15. 0.999888610646897\n",
       "16. 1\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "            interface2 interface7 interface10 interface11\n",
       "interface2   1.0000000  0.9991045   0.3907492   0.3905010\n",
       "interface7   0.9991045  1.0000000   0.3964814   0.3962536\n",
       "interface10  0.3907492  0.3964814   1.0000000   0.9998886\n",
       "interface11  0.3905010  0.3962536   0.9998886   1.0000000"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cor(all)\n",
    "# number of packets sent on 10 are similar to the number of packets sent on 11 as you can see from\n",
    "#correlation function (coefficients interface10=1, interface11=0.9998886)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "plot without title"
      ]
     },
     "metadata": {
      "image/svg+xml": {
       "isolated": true
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Question 9\n",
    "qqplot(inter2, inter7)\n",
    "# Yes links 2 and 7 have a similar distribution of packets looking at the qqplot(also correlation function).\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "12.7"
      ],
      "text/latex": [
       "12.7"
      ],
      "text/markdown": [
       "12.7"
      ],
      "text/plain": [
       "[1] 12.7"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "12.7"
      ],
      "text/latex": [
       "12.7"
      ],
      "text/markdown": [
       "12.7"
      ],
      "text/plain": [
       "[1] 12.7"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Question 10\n",
    "\n",
    "myvar <- function(n)\n",
    "{\n",
    "len <- length(n)\n",
    "sum <- sum(n)\n",
    "mean <- sum/len\n",
    "diff = n - mean\n",
    "(sum(diff*diff))/(len-1)\n",
    "    }\n",
    "#test\n",
    "myvar(c(1,2,8,9,4))\n",
    "\n",
    "var(c(1,2,8,9,4))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\n",
       "\tWelch Two Sample t-test\n",
       "\n",
       "data:  inter3 and inter6\n",
       "t = 2.7712, df = 35.981, p-value = 0.008785\n",
       "alternative hypothesis: true difference in means is not equal to 0\n",
       "95 percent confidence interval:\n",
       "  24.93612 161.06388\n",
       "sample estimates:\n",
       "mean of x mean of y \n",
       " 896.1579  803.1579 \n"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "\n",
       "\tWelch Two Sample t-test\n",
       "\n",
       "data:  inter3 and inter6\n",
       "t = 2.7712, df = 35.981, p-value = 0.008785\n",
       "alternative hypothesis: true difference in means is not equal to 0\n",
       "99 percent confidence interval:\n",
       "   1.731673 184.268327\n",
       "sample estimates:\n",
       "mean of x mean of y \n",
       " 896.1579  803.1579 \n"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "\n",
       "\tWelch Two Sample t-test\n",
       "\n",
       "data:  inter3 and inter6\n",
       "t = 2.7712, df = 35.981, p-value = 0.008785\n",
       "alternative hypothesis: true difference in means is not equal to 0\n",
       "90 percent confidence interval:\n",
       "  36.34011 149.65989\n",
       "sample estimates:\n",
       "mean of x mean of y \n",
       " 896.1579  803.1579 \n"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# problem 7\n",
    "inter3 <- (data[data[[1]]==3, c(2)] +data[data[[1]]==3, c(5)] + data[data[[1]]==3, c(6)]\n",
    "      +data[data[[1]]==3, c(7) ])\n",
    "inter6 <- (data[data[[1]]==6, c(2)] +data[data[[1]]==6, c(5)] + data[data[[1]]==6, c(6)]\n",
    "      +data[data[[1]]==6, c(7) ])\n",
    "t.test(inter3, inter6, conf.level=0.95)\n",
    "t.test(inter3, inter6, conf.level=0.99)\n",
    "t.test(inter3, inter6, conf.level=0.90)\n",
    "\n",
    "# conf.level=0.95\n",
    "links 3 and 6 does not have a statistically identical number of total packets (input + output, \n",
    "                                                                               all types) per\n",
    "sampling period since welch two sample t-test shows that true difference in means is not equal to 0.\n",
    "# conf.level=0.99\n",
    "links 3 and 6 does not have a statistically identical number of total packets (input + output, \n",
    "                                                                               all types) per\n",
    "sampling period since welch two sample t-test shows that true difference in means is not equal to 0.\n",
    "# conf.level=0.90\n",
    "links 3 and 6 does not have a statistically identical number of total packets (input + output, \n",
    "                                                                               all types) per\n",
    "sampling period since welch two sample t-test shows that true difference in means is not equal to 0."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\n",
       "\tOne Sample t-test\n",
       "\n",
       "data:  data[data[[1]] == 2, c(5)]\n",
       "t = 17.357, df = 18, p-value = 1.096e-12\n",
       "alternative hypothesis: true mean is not equal to 0\n",
       "95 percent confidence interval:\n",
       " 1363.773 1739.385\n",
       "sample estimates:\n",
       "mean of x \n",
       " 1551.579 \n"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "1376.3699001452"
      ],
      "text/latex": [
       "1376.3699001452"
      ],
      "text/markdown": [
       "1376.3699001452"
      ],
      "text/plain": [
       "[1] 1376.37"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "1726.78799459165"
      ],
      "text/latex": [
       "1726.78799459165"
      ],
      "text/markdown": [
       "1726.78799459165"
      ],
      "text/plain": [
       "[1] 1726.788"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "1402.29368774455"
      ],
      "text/latex": [
       "1402.29368774455"
      ],
      "text/markdown": [
       "1402.29368774455"
      ],
      "text/plain": [
       "[1] 1402.294"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "1700.86420699229"
      ],
      "text/latex": [
       "1700.86420699229"
      ],
      "text/markdown": [
       "1700.86420699229"
      ],
      "text/plain": [
       "[1] 1700.864"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "\n",
       "\tOne Sample t-test\n",
       "\n",
       "data:  data[data[[1]] == 2, c(5)]\n",
       "t = 17.357, df = 18, p-value = 1.096e-12\n",
       "alternative hypothesis: true mean is not equal to 0\n",
       "90 percent confidence interval:\n",
       " 1396.567 1706.591\n",
       "sample estimates:\n",
       "mean of x \n",
       " 1551.579 \n"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "\n",
       "\tOne Sample t-test\n",
       "\n",
       "data:  data[data[[1]] == 2, c(5)]\n",
       "t = 17.357, df = 18, p-value = 1.096e-12\n",
       "alternative hypothesis: true mean is not equal to 0\n",
       "95 percent confidence interval:\n",
       " 1363.773 1739.385\n",
       "sample estimates:\n",
       "mean of x \n",
       " 1551.579 \n"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# problem 6\n",
    "mean <- mean(data[data[[1]]==2, c(5)])\n",
    "sd <-  sd(data[data[[1]]==2, c(5)])\n",
    "\n",
    "length <- length(data[data[[1]]==2, c(5)])\n",
    "t.test(data[data[[1]]==2, c(5)])\n",
    "# 0.95\n",
    "ciLower=mean-1.96*(sd/sqrt(length))\n",
    "ciU=mean+1.96*(sd/sqrt(length))\n",
    "ciLower\n",
    "ciU\n",
    "# 0.90\n",
    "ciL <- mean-1.67*(sd/sqrt(length))\n",
    "ciu <- mean+1.67*(sd/sqrt(length))\n",
    "ciL\n",
    "ciu\n",
    "\n",
    "#test for 0.90\n",
    "t.test(data[data[[1]]==2, c(5)], conf.level=0.90)\n",
    "#test for 0.95\n",
    "t.test(data[data[[1]]==2, c(5)], conf.level=0.95)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "BOOTSTRAP CONFIDENCE INTERVAL CALCULATIONS\n",
       "Based on 999 bootstrap replicates\n",
       "\n",
       "CALL : \n",
       "boot.ci(boot.out = b, type = c(\"norm\", \"basic\", \"perc\"))\n",
       "\n",
       "Intervals : \n",
       "Level      Normal              Basic              Percentile     \n",
       "95%   (852.5, 941.7 )   (849.5, 939.1 )   (853.3, 942.8 )  \n",
       "Calculations and Intervals on Original Scale"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Question 8\n",
    "\n",
    "inter3 <- (data[data[[1]]==3, c(2)] +data[data[[1]]==3, c(5)] + data[data[[1]]==3, c(6)]\n",
    "      +data[data[[1]]==3, c(7) ])\n",
    "\n",
    "library(boot)\n",
    "b <- boot(inter3,function(u,i) mean(u[i]), R = 999)\n",
    "boot.ci(b, type = c(\"norm\", \"basic\", \"perc\"))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "R",
   "language": "R",
   "name": "ir"
  },
  "language_info": {
   "codemirror_mode": "r",
   "file_extension": ".r",
   "mimetype": "text/x-r-source",
   "name": "R",
   "pygments_lexer": "r",
   "version": "3.2.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
